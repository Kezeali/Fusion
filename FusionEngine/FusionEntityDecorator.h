/*
*  Copyright (c) 2010 Fusion Project Team
*
*  This software is provided 'as-is', without any express or implied warranty.
*  In noevent will the authors be held liable for any damages arising from the
*  use of this software.
*
*  Permission is granted to anyone to use this software for any purpose,
*  including commercial applications, and to alter it and redistribute it
*  freely, subject to the following restrictions:
*
*    1. The origin of this software must not be misrepresented; you must not
*    claim that you wrote the original software. If you use this software in a
*    product, an acknowledgment in the product documentation would be
*    appreciated but is not required.
*
*    2. Altered source versions must be plainly marked as such, and must not
*    be misrepresented as being the original software.
*
*    3. This notice may not be removed or altered from any source distribution.
*
*
*  File Author(s):
*
*    Elliot Hayward
*/

#ifndef Header_FusionEntityDecorator
#define Header_FusionEntityDecorator

#if _MSC_VER > 1000
#pragma once
#endif

#include "FusionPrerequisites.h"

#include <Rocket/Core/Decorator.h>

namespace Rocket { namespace Core {
		class Geometry;
} }

namespace FusionEngine
{

	//! Renders an Entity
	/*!
	* Renders a specific entity (defined in non-inline rcss) - as opposed
	* to DynamicEntityDecorator, which renders an entity defined by a property
	* of the element it is set to.
	*/
	class EntityDecorator : public Rocket::Core::Decorator
	{
	public:
		EntityDecorator(const EntityPtr& entity, Renderer* renderer);
		
		//! Called on a decorator to generate any required per-element data for a newly decorated element.
		virtual Rocket::Core::DecoratorDataHandle GenerateElementData(Rocket::Core::Element* element);

		//! Called to release element data generated by this decorator.
		virtual void ReleaseElementData(Rocket::Core::DecoratorDataHandle element_data);

		//! Called to render the decorator on an element.
		virtual void RenderElement(Rocket::Core::Element* element, Rocket::Core::DecoratorDataHandle element_data);

	protected:
		Renderer* m_Renderer;
		EntityPtr m_Entity;

		//Rocket::Core::Geometry* m_Geometry;
	};

	//! Renders an Entity
	class DynamicEntityDecorator : public Rocket::Core::Decorator
	{
	public:
		DynamicEntityDecorator(const EntityManager* const entity_manager, Renderer* renderer);
		
		//! Called on a decorator to generate any required per-element data for a newly decorated element.
		virtual Rocket::Core::DecoratorDataHandle GenerateElementData(Rocket::Core::Element* element);

		//! Called to release element data generated by this decorator.
		virtual void ReleaseElementData(Rocket::Core::DecoratorDataHandle element_data);

		//! Called to render the decorator on an element.
		virtual void RenderElement(Rocket::Core::Element* element, Rocket::Core::DecoratorDataHandle element_data);

	protected:
		Renderer* m_Renderer;
		EntityManager* m_EntityManager;

		EntityPtr m_Entity;

		//Rocket::Core::Geometry* m_Geometry;
	};

}

#endif